{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Klodd","text":"<p>Klodd is a service that makes it easy to deploy per-team instances for CTF challenges. Simply create a challenge definition, and Klodd will allow each competitor to launch a new instance for their team on demand.</p> <p>For Competitors</p> <p>If you're competing in a CTF using Klodd, head over to the how-to for help.</p> <p>Some CTF challenges, particularly those involving prototype pollution and remote code execution, can potentially allow competitors to interfere with each other, whether out of malice or simply by solving the challenge. In these situations, it can be difficult to deploy challenges in a way that keeps CTFs fun and competitive for everyone. Klodd solves this problem, by giving each team their own deployment that is identical to everyone else's.</p> <p>Klodd can also be used to save resources. Challenges are not deployed until requested, so there will be nothing running when traffic is low.</p> <p>Each deployable challenge is represented using a Kubernetes Custom Resource. This means you can take advantage of the powerful Kubernetes API, and also use existing tools, like Terraform, to manage Klodd challenges.</p>"},{"location":"how-to/","title":"How To Use Klodd","text":"<p>This is a guide for how to start, access, and stop challenges deployed using Klodd.</p>"},{"location":"how-to/#starting-an-instance","title":"Starting an Instance","text":"<p>When you first open the page for a challenge, you will see something like this:</p> <p> </p> <p>To start an instance, simply click the \"Start\" button. The instance may remain in the \"Starting\" state for some time, after which it will transition to the \"Running\" state. At this point, the challenge instance is ready to be used.</p>"},{"location":"how-to/#accessing-an-instance","title":"Accessing an Instance","text":"<p>A server address will be provided when an instance is in either the \"Starting\" or \"Running\" states.</p>"},{"location":"how-to/#web-challenges","title":"Web Challenges","text":"<p>If the challenge is accessible through a website, then no special action is needed. Either click the provided link or copy it into your solution script.</p> <p> </p>"},{"location":"how-to/#tcp-challenges","title":"TCP Challenges","text":"<p>If the challenge is accessible through a network socket, then you must connect, using SNI, to the host and port provided.</p> <p>No netcat!</p> <p>OpenBSD netcat (the <code>nc</code> command you probably have installed) does not support SNI, so you can not use a regular <code>nc</code> command to connect to TCP challenges deployed using Klodd.</p> <p> </p> <p>Click one of the four tabs depending on which connection method you would like to use. This gives you a code snippet or command you can use to connect to the challenge. You can also click the copy button to the right to copy it to your clipboard.</p> <p>Each of the four connection methods is explained in more detail below.</p> Connecting with pwntools <p>pwntools supports SNI out of the box. This is the recommended connection method. <pre><code>from pwn import remote\n\nr = remote('babyheapng-e20d62127bb9434b.tjc.tf', 1337, ssl=True)\n</code></pre> Apart from the <code>ssl=True</code> in line 3, this is identical to connecting to a normal TCP challenge.</p> Connecting with socat <p>socat only supports SNI in version 1.7.4.0 or later. Depending on your system, the version of socat installed may be too old. If this is the case, you can download and compile socat from source (this should only take a few minutes) or try a different connection method.</p> <p>The command copied from Klodd connects <code>STDIO</code> (<code>-</code> is shorthand) to the server. You can replace <code>-</code> with any address that socat supports; click \"Proxy\" below for an example.</p> DirectProxy <p><pre><code>socat - openssl:babyheapng-e20d62127bb9434b.tjc.tf:1337\n</code></pre> This command connects directly to the server.</p> <p><pre><code>socat tcp-listen:12345,fork,reuseaddr openssl:babyheapng-e20d62127bb9434b.tjc.tf:1337\n</code></pre> This command starts a proxy listening on local port 12345 that forwards connections to the real server. This is just a normal socket server, and you can connect to it like you do in most CTFs:</p> <ul> <li><code>remote('localhost', 12345)</code></li> <li><code>nc localhost 12345</code></li> </ul> Connecting with Ncat <p>Ncat is an improved reimplementation of netcat from Nmap. <pre><code>ncat --ssl babyheapng-e20d62127bb9434b.tjc.tf 1337\n</code></pre> Apart from the <code>--ssl</code> option, this syntax is quite similar to regular netcat.</p> Connecting with OpenSSL <code>s_client</code> <p><code>s_client</code> is a generic SSL/TLS client from the OpenSSL command line tool. <pre><code>openssl s_client -quiet -verify_quiet -connect babyheapng-e20d62127bb9434b.tjc.tf:1337\n</code></pre> You may omit the <code>-quiet</code> and <code>-verify_quiet</code> options, but there will be some extra output from OpenSSL.</p>"},{"location":"how-to/#stopping-an-instance","title":"Stopping an Instance","text":"<p>Each instance has a configured time limit, after which it will be stopped automatically. If you are finished with your instance before this happens, then you can click the \"Stop\" button to stop your instance early.</p>"},{"location":"examples/basic/","title":"Basic Deployment","text":"<p>The following set of Kubernetes manifests will deploy Klodd to a new namespace called <code>klodd</code>, using a sample configuration. Klodd will be deployed to <code>https://klodd.localhost.direct</code> which points to <code>127.0.0.1</code>, so ensure your ingress controller is accessible on localhost.</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: klodd\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: klodd\n  namespace: klodd\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: klodd\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: klodd # (1)\nsubjects:\n  - kind: ServiceAccount\n    name: klodd\n    namespace: klodd\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: klodd\n  namespace: klodd\ntype: Opaque\ndata: # (2)\n  config.yaml: Y2hhbGxlbmdlRG9tYWluOiBsb2NhbGhvc3QuZGlyZWN0Cmt1YmVDb25maWc6IGNsdXN0ZXIKcHVibGljVXJsOiBodHRwczovL2tsb2RkLmxvY2FsaG9zdC5kaXJlY3QKcmN0ZlVybDogaHR0cHM6Ly9jdGYudGpjdGYub3JnCnRyYWVmaWs6CiAgaHR0cEVudHJ5cG9pbnQ6IHdlYnNlY3VyZQogIHRjcEVudHJ5cG9pbnQ6IHRjcAogIHRjcFBvcnQ6IDEzMzcKaW5ncmVzczoKICBuYW1lc3BhY2VTZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrdWJlcm5ldGVzLmlvL21ldGFkYXRhLm5hbWU6IHRyYWVmaWsKICBwb2RTZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiB0cmFlZmlrCnNlY3JldEtleTogInJhbmRvbWx5IGdlbmVyYXRlZCBzZWNyZXQga2V5IgpyZWNhcHRjaGE6CiAgc2l0ZUtleTogNkxlSXhBY1RBQUFBQUpjWlZScXlIaDcxVU1JRUdOUV9NWGppWktoSQogIHNlY3JldEtleTogNkxlSXhBY1RBQUFBQUdHLXZGSTFUblJXeE1aTkZ1b2pKNFdpZkpXZQo=\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: klodd\n  namespace: klodd\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: klodd\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: klodd\n    spec:\n      serviceAccountName: klodd # (3)\n      volumes:\n        - name: config\n          secret:\n            secretName: klodd\n      containers:\n        - name: klodd\n          image: ghcr.io/tjcsec/klodd:master # (4)\n          volumeMounts:\n            - name: config\n              mountPath: /app/config/\n              readOnly: true\n          ports:\n            - name: public\n              containerPort: 5000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: klodd\n  namespace: klodd\nspec:\n  type: ClusterIP\n  selector:\n    app.kubernetes.io/name: klodd\n  ports:\n    - name: public\n      port: 5000\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: klodd\n  namespace: klodd\nspec:\n  rules:\n    - host: klodd.localhost.direct\n      http:\n        paths:\n          - backend:\n              service:\n                name: klodd\n                port:\n                  number: 5000\n            path: /\n            pathType: ImplementationSpecific\n</code></pre> <ol> <li>You must first apply the Klodd ClusterRole\u2014instructions for how to do this are provided here.</li> <li>The decoded contents are provided below.</li> <li>This allows Klodd to access the cluster using the ServiceAccount with ClusterRole created above.</li> <li>Using a more specific tag or SHA256 digest is recommended.</li> </ol>"},{"location":"examples/basic/#configyaml","title":"config.yaml","text":"<p>Here are the contents of <code>config.yaml</code>:</p> <pre><code>challengeDomain: localhost.direct # (1)\nkubeConfig: cluster\npublicUrl: https://klodd.localhost.direct\nrctfUrl: https://ctf.tjctf.org # (2)\ntraefik: # (3)\n  httpEntrypoint: websecure\n  tcpEntrypoint: tcp\n  tcpPort: 1337\ningress: # (4)\n  namespaceSelector:\n    matchLabels:\n      kubernetes.io/metadata.name: traefik\n  podSelector:\n    matchLabels:\n      app.kubernetes.io/name: traefik\nsecretKey: \"randomly generated secret key\"\nrecaptcha: # (5)\n  siteKey: 6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\n  secretKey: 6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe\n</code></pre> <ol> <li>A wildcard TLS certificate for <code>localhost.direct</code> is publicly available here.</li> <li>At the time of writing, <code>https://ctf.tjctf.org/auth</code> allows redirecting to <code>https://klodd.localhost.direct/auth</code>, but this is subject to change in the future.</li> <li>Ensure this configuration matches your Traefik installation. See Configuration for more information.</li> <li>Ensure this configuration matches your Traefik installation. See Configuration for more information.</li> <li>These are the reCAPTCHA v2 test keys.</li> </ol>"},{"location":"examples/challenges/","title":"Challenge Examples","text":"<p>This page includes several examples of challenges.</p>"},{"location":"examples/challenges/#test-challenge","title":"Test Challenge","text":"<p>This \"challenge\" simply deploys <code>traefik/whoami</code>.</p> <pre><code>apiVersion: \"klodd.tjcsec.club/v1\"\nkind: Challenge\nmetadata:\n  name: test\nspec:\n  name: Test Challenge\n  timeout: 10000\n  pods:\n    - name: app\n      ports:\n        - port: 80\n      spec:\n        containers:\n          - name: main\n            image: traefik/whoami:latest\n            resources:\n              requests:\n                memory: 100Mi\n                cpu: 75m\n              limits:\n                memory: 250Mi\n                cpu: 100m\n        automountServiceAccountToken: false\n  expose:\n    kind: http\n    pod: app\n    port: 80\n  middlewares:\n    - contentType:\n        autoDetect: false\n    - rateLimit:\n        average: 5\n        burst: 10\n</code></pre>"},{"location":"examples/challenges/#fruit-store","title":"Fruit Store","text":"<p>This is <code>fruit-store</code> from TJCTF 2022. The source (including Dockerfile) can be found here.</p> <pre><code>apiVersion: \"klodd.tjcsec.club/v1\"\nkind: Challenge\nmetadata:\n  name: fruit-store\nspec:\n  name: Fruit Store\n  timeout: 60000\n  pods:\n    - name: app\n      ports:\n        - port: 3000\n      spec:\n        containers:\n          - name: main\n            image: fruit-store:latest\n            resources:\n              requests:\n                memory: 100Mi\n                cpu: 75m\n              limits:\n                memory: 250Mi\n                cpu: 100m\n        automountServiceAccountToken: false\n  expose:\n    kind: http\n    pod: app\n    port: 3000\n</code></pre>"},{"location":"examples/challenges/#analects","title":"Analects","text":"<p>This is <code>analects</code> from TJCTF 2022. The source (including Dockerfile) can be found here.</p> <p>This challenge uses multiple pods, and also includes a startup probe. The <code>mysql</code> pod can take several minutes to fully initialize, and the startup probe for <code>app</code> will fail during this time, causing it to be unavailable. When the exposed pod is in an unavailable state, the status of the instance remains as \"Starting\" and the service is unavailable.</p> <pre><code>apiVersion: \"klodd.tjcsec.club/v1\"\nkind: Challenge\nmetadata:\n  name: analects\nspec:\n  name: Analects\n  timeout: 300000\n  pods:\n    - name: app\n      ports:\n        - port: 80\n      spec:\n        containers:\n          - name: app\n            image: analects-app:latest\n            resources:\n              requests:\n                memory: 100Mi\n                cpu: 50m\n              limits:\n                memory: 200Mi\n                cpu: 100m\n            startupProbe:\n              httpGet:\n                path: \"/search.php?q=with%20two%20others\"\n                port: 80\n              initialDelaySeconds: 0\n              periodSeconds: 5\n              failureThreshold: 30\n        automountServiceAccountToken: false\n    - name: mysql\n      ports:\n        - port: 3306\n      spec:\n        containers:\n          - name: mysql\n            image: analects-mysql:latest\n            resources:\n              requests:\n                memory: 200Mi\n                cpu: 50m\n              limits:\n                memory: 500Mi\n                cpu: 100m\n        automountServiceAccountToken: false\n  expose:\n    kind: http\n    pod: app\n    port: 80\n</code></pre>"},{"location":"examples/challenges/#babyheapng","title":"babyheapng","text":"<p>This is <code>babyheapng</code> from TJCTF 2022. The source (including Dockerfile) can be found here.</p> <p>Note the use of <code>securityContext.privileged</code>. This is because this challenge uses <code>redpwn/jail</code>.</p> <pre><code>apiVersion: \"klodd.tjcsec.club/v1\"\nkind: Challenge\nmetadata:\n  name: babyheapng\nspec:\n  name: babyheapng\n  timeout: 60000\n  pods:\n    - name: main\n      ports:\n        - port: 5000\n      spec:\n        containers:\n          - name: main\n            image: babyheapng:latest\n            resources:\n              requests:\n                memory: 100Mi\n                cpu: 50m\n              limits:\n                memory: 200Mi\n                cpu: 100m\n            securityContext:\n              privileged: true\n        automountServiceAccountToken: false\n  expose:\n    kind: tcp\n    pod: main\n    port: 5000\n</code></pre>"},{"location":"examples/terraform/","title":"Terraform","text":"<p>This example uses Terraform to configure the Fruit Store challenge.</p> <pre><code>resource \"kubernetes_manifest\" \"klodd_fruit_store\" {\n  manifest = {\n    apiVersion = \"klodd.tjcsec.club/v1\"\n    kind       = \"Challenge\"\n    metadata = {\n      name      = \"fruit-store\"\n      namespace = \"ctf-system\" # (1)\n    }\n    spec = {\n      name    = \"Fruit Store\"\n      timeout = 60000\n      pods = [\n        {\n          name = \"app\"\n          ports = [\n            {\n              port = 3000\n            }\n          ]\n          spec = {\n            containers = [\n              {\n                name  = \"main\"\n                image = \"fruit-store:latest\"\n                resources = {\n                  requests = {\n                    memory = \"100Mi\"\n                    cpu    = \"75m\"\n                  }\n                  limits = {\n                    memory = \"250Mi\"\n                    cpu    = \"100m\"\n                  }\n                }\n              }\n            ]\n            automountServiceAccountToken = false\n          }\n        }\n      ]\n      expose = {\n        kind = \"http\"\n        pod  = \"app\"\n        port = 3000\n      }\n    }\n  }\n}\n</code></pre> <ol> <li>Any namespace is fine.</li> </ol>"},{"location":"install-guide/challenges/","title":"Challenges","text":"<p>Refer to the examples and CRD schema for more information.</p> <pre><code>apiVersion: \"klodd.tjcsec.club/v1\"\nkind: Challenge\nmetadata:\n  name: test # (1)\nspec:\n  name: Test Challenge # (2)\n  timeout: 10000 # (3)\n  pods:\n    - name: app # (4)\n      ports: # (5)\n        - port: 80\n      spec: # (6)\n        containers:\n          - name: main\n            image: traefik/whoami:latest\n            resources:\n              requests:\n                memory: 100Mi\n                cpu: 75m\n              limits:\n                memory: 250Mi\n                cpu: 100m\n        automountServiceAccountToken: false\n  expose:\n    kind: http # (7)\n    pod: app # (8)\n    port: 80\n  middlewares: # (9)\n    - contentType:\n        autoDetect: false\n    - rateLimit:\n        average: 5\n        burst: 10\n</code></pre> <ol> <li>The name of the resource is also used in the challenge URL. For example, the page for this challenge is accessible at <code>/challenge/test</code>.</li> <li>This is the name displayed on the frontend. It does not have to be related to <code>metadata.name</code> in any way.</li> <li>Each instance will be stopped after this many milliseconds. This challenge will run for 10 seconds.</li> <li>The name is used for Deployments and Services corresponding to this Pod.</li> <li>The ports listed here are used to create Services. Each Pod must have at least one port.</li> <li>This is a normal PodSpec.</li> <li>This must be either <code>http</code> or <code>tcp</code>.</li> <li>This is the name of the Service that will be exposed, and it must match the name given in <code>spec.pods</code>.</li> <li>Each object in this array will be turned into a Middleware or MiddlewareTCP if <code>expose.kind</code> is <code>http</code> or <code>tcp</code>, respectively. Refer to the Traefik documentation for instructions on configuring these.</li> </ol>"},{"location":"install-guide/configuration/","title":"Configuration","text":"<p>Klodd is configured using YAML<sup>1</sup> files. Klodd will load all files with <code>.yaml</code> or <code>.yml</code> extensions in the configuration directory in order by filename, then merge all of them together. By default, the configuration directory is <code>/app/config/</code>, but this may be changed using the environment variable <code>KLODD_CONFIG</code>. All configuration options are required, though some have sensible defaults.</p>"},{"location":"install-guide/configuration/#reference","title":"Reference","text":"Property Default Type Description <code>challengeDomain</code> none string Challenges will be accessible through subdomains of this domain. <code>kubeConfig</code> <code>'cluster'</code> string Where the kubeconfig will be loaded from. (details) <code>listen</code> <code>0.0.0.0:5000</code> ListenOptions ListenOptions passed to <code>fastify.listen</code> (details) <code>publicUrl</code> none string The URL where Klodd is publicly accessible. <code>rctfUrl</code> none string The URL where rCTF is publicly accessible. <code>recaptcha</code> test keys object The reCAPTCHA v2 keys. (details) <code>secretKey</code> none string The secret key used to sign user tokens. <code>traefik</code> none object The Traefik entrypoints to use for challenges (details) <code>ingress</code> none NetworkPolicyPeer A source that will be allowed to access the exposed pod. (details) <code>reapInterval</code> <code>30000</code> integer The interval, in milliseconds, that the expired instance reaper will run. (details) <code>logLevel</code> <code>'info'</code> string The logging level. (details)"},{"location":"install-guide/configuration/#kubeconfig","title":"kubeconfig","text":"<p>The <code>kubeConfig</code> property tells Klodd where to load the kubeconfig from. By default, this is set to <code>'cluster'</code>, which uses the ServiceAccount token mounted to the pod Klodd is running in. The other option is <code>'default'</code>, which loads from <code>~/.kube/config</code> or whatever the <code>KUBECONFIG</code> environment variable is set to.</p>"},{"location":"install-guide/configuration/#recaptcha","title":"reCAPTCHA","text":"<p>Klodd uses reCAPTCHA v2 to verify that requests to create and delete instances are not automated. First, register a new site, making sure to select \"reCAPTCHA v2\" and \"Invisible reCAPTCHA badge\" as shown below. Then, configure <code>recaptcha.siteKey</code> and <code>recaptcha.secretKey</code> with the keys you are given.</p> <p></p>"},{"location":"install-guide/configuration/#traefik","title":"Traefik","text":"<p>As mentioned in Prerequisites, you should have configured two Traefik entrypoints\u2014one for web challenges and another for TCP challenges. Set <code>traefik.httpEntrypoint</code> and <code>traefik.tcpEntrypoint</code> to the names of these entrypoints, and set <code>traefik.tcpPort</code> to the port number of the exposed TCP entrypoint so it can be properly displayed on the frontend.</p> <p>Additionally, ingress must be allowed from Traefik to the exposed pod of each instance. Set <code>ingress</code> to a NetworkPolicyPeer object that matches Traefik. This will be used in a NetworkPolicy for each instance.</p>"},{"location":"install-guide/configuration/#reaper","title":"Reaper","text":"<p>Klodd schedules termination of each instance when it is created, and restores these on startup. Normally, this is sufficient; however, Klodd also periodically runs a \"reaper,\" which goes through all running instances and updates their scheduled termination. This ensures that no instances will remain running indefinitely. By default, the reaper runs every 30 seconds, but this interval can be configured with the <code>reapInterval</code> property.</p>"},{"location":"install-guide/configuration/#log-level","title":"Log Level","text":"<p>Klodd uses Pino for logging, and the log level can be configured to any level that Pino accepts. The table is reproduced here for convenience:</p> Level: trace debug info warn error fatal silent Value: 10 20 30 40 50 60 Infinity <p>By default, Klodd uses <code>'info'</code> if the environment variable <code>NODE_ENV=production</code> is present and <code>'debug'</code> otherwise.</p> <ol> <li> <p>Since YAML is a superset of JSON, including JSON or using entirely JSON in your <code>.yaml</code>/<code>.yml</code> files is valid and allowed.\u00a0\u21a9</p> </li> </ol>"},{"location":"install-guide/installation/","title":"Installation","text":"<p>Once you have completed all the prerequisites, you are ready to install and run Klodd.</p> <p>Deployment Steps</p> <ul> <li>Install the Klodd Challenge CRD and ClusterRole</li> <li>Deploy Klodd</li> <li>Add challenges</li> </ul>"},{"location":"install-guide/installation/#crd-and-clusterrole","title":"CRD and ClusterRole","text":"<p>Installing CRD and ClusterRole</p> <pre><code># Install Klodd Challenge CRD\nkubectl apply -f https://raw.githubusercontent.com/TJCSec/klodd/master/manifests/klodd-crd.yaml\n\n# Install Klodd ClusterRole\nkubectl apply -f https://raw.githubusercontent.com/TJCSec/klodd/master/manifests/klodd-rbac.yaml\n</code></pre> <p>Use the commands above to install the Klodd Challenge CRD and ClusterRole.</p>"},{"location":"install-guide/installation/#deployment","title":"Deployment","text":"<p>Klodd is available as a Docker image. Klodd can run outside of a cluster, as long as a kubeconfig is available. However, it is designed to run in the Kubernetes cluster where it will deploy challenges.</p> <p>Create a ServiceAccount and bind the Klodd ClusterRole to it. Then, create a Deployment for Klodd, and expose it using a Service and Ingress. To configure Klodd, you can store configuration in a Secret, then mount the Secret to the Deployment. An example of all of this is provided here.</p> <p>Ratelimiting is recommended</p> <p>Serving Klodd requests can potentially be quite expensive. Though an effort is made to prevent automated requests (using reCAPTCHA), a strict ratelimit is still recommended. Configuring a RateLimit middleware using Traefik is very easy\u2014you can learn how to do this here.</p> <p>More detailed instructions on configuration are provided here.</p>"},{"location":"install-guide/installation/#challenges","title":"Challenges","text":"<p>Each challenge is configured using a custom resource. You can apply these manually, but using a tool like Terraform is highly recommended. More detailed instructions on challenge configuration are provided here.</p>"},{"location":"install-guide/prerequisites/","title":"Prerequisites","text":"<p>There are a number of prerequisites that you must set up before using Klodd.</p> <p>Before installing Klodd</p> <ul> <li>Add rCTF authentication</li> <li>Obtain a domain name and wildcard TLS certificate</li> <li>Configure a wildcard DNS record</li> <li>Install Traefik</li> </ul>"},{"location":"install-guide/prerequisites/#rctf","title":"rCTF","text":"<p>Klodd integrates with rCTF, redpwn's CTF platform. Because rCTF does not currently support OAuth, you must patch in \"pseudo-OAuth\" functionality. Consider using the following Cloudflare worker on your rCTF domain <code>/auth*</code>, replacing <code>[KLODD_URL]</code> with Klodd's public URL.</p> <pre><code>const renderAuthPage = uri =&gt; `&lt;!doctype html&gt;\n&lt;script&gt;\nconst token = localStorage.token\nconst state = new URL(location).searchParams.get('state')\nif (state &amp;&amp; token) {\n  location = \\`${uri}?state=\\${encodeURIComponent(state)}&amp;token=\\${encodeURIComponent(token)}\\`\n} else {\n  location = '/login'\n}\n&lt;/script&gt;\n`\n\nconst redirectUris = ['https://[KLODD_URL]/auth']\n\nconst handle = req =&gt; {\n  const url = new URL(req.url)\n  const redirectUri = url.searchParams.get('redirect_uri')\n  if (!redirectUris.includes(redirectUri)) {\n    return new Response(null, { status: 400 })\n  }\n  return new Response(renderAuthPage(redirectUri), {\n    headers: { 'content-type': 'text/html' }\n  })\n}\n\naddEventListener('fetch', evt =&gt; evt.respondWith(handle(evt.request)))\n</code></pre> <p>You may choose to implement this in a different way. All it needs to do is redirect to <code>https://[KLODD_URL]/auth</code> with an rCTF token and the given <code>state</code>.</p> <p>Warning</p> <p>Be careful if you choose not to use this code. An improper implementation could lead to tokens being stolen.</p>"},{"location":"install-guide/prerequisites/#ingress","title":"Ingress","text":"<p>You must use Traefik as an ingress controller with the Traefik CRDs installed.</p> <p>Create one entrypoint for web challenges and another for TCP challenges. The web challenge entrypoint should be port 443\u2014Klodd will still function if this is not the case, but the links provided on the frontend will not work properly. The TCP challenge entrypoint can be on any port you like.</p> <p>A domain and corresponding wildcard TLS certificate are required. Klodd will serve individual instances on subdomains of this domain. You are responsible for properly configuring a wildcard DNS record to point these subdomains at your cluster. Ensure that TLS is properly configured in Traefik as well.</p>"}]}